name: gh-pages
on:
  push:
    branches:
      - master

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: init
        shell: bash
        run: |
          echo "::set-output name=yarn_cache::$(yarn cache dir)"
          #
          echo "Node $(node --version)"
          echo "Yarn $(yarn --version)"
      - uses: actions/checkout@v2

      - name: Cache Yarn packages
        id: yarn_cache_packages
        uses: actions/cache@v1
        with:
          path: ${{ steps.init.outputs.yarn_cache }}
          key: ${{ runner.os }}-yarn_cache-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn_cache-
      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-yarn-

      - name: Installing
        run: yarn --frozen-lockfile --perfer-offline --link-duplicates
        
      - name: Build demo
        run: yarn build:demo

      - name: Deploy demo
        run: |
          git config --global user.email $GIT_AUTHOR_EMAIL
          git config --global user.name $GIT_AUTHOR_NAME 
          yarn run gh-pages-clean
          yarn deploy
        env:
          GIT_AUTHOR_EMAIL: ${{ secrets.GIT_AUTHOR_EMAIL }}
          GIT_AUTHOR_NAME: ${{ secrets.GIT_AUTHOR_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
